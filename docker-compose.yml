services:
  # 프론트엔드 서비스 (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: essay-afs-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://essay-server.gbeai.net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - essay-network

  # 백엔드 서비스 (FastAPI)
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: essay-afs-backend
    restart: unless-stopped
    ports:
      - "3050:3050"
    volumes:
      # SQLite 데이터베이스 영구 저장
      - ./backend/db:/app/db
      # 로그 파일 저장
      - ./backend/logs:/app/logs
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - DATABASE_URL=${DATABASE_URL:-sqlite+aiosqlite:///./db/essay_afs.db}
      - DATABASE_PATH=/app/db/essay_afs.db
      - CORS_ORIGINS=${CORS_ORIGINS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - essay-network

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: essay-afs-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx 설정 파일
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL 인증서 (Certbot이 생성)
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      # Nginx 로그
      - ./logs/nginx:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      fastapi:
        condition: service_healthy
    networks:
      - essay-network

  # Certbot (SSL 인증서 발급 및 갱신)
  certbot:
    image: certbot/certbot
    container_name: essay-afs-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - essay-network

networks:
  essay-network:
    driver: bridge

volumes:
  db_data:
  certbot_conf:
  certbot_www:
